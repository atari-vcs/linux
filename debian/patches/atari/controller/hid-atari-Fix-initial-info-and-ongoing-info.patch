From: Sjoerd Simons <sjoerd@collabora.com>
Date: Mon, 30 Mar 2020 21:16:17 +0200
Subject: hid: atari: Fix initial info and ongoing info

The controllers drop output reports directly send after a led out report
(without a sleep). So send the request for info (mac/battery) first and
only then the led update.

Also whenever sending a output report wait until for the i/o to complete
to not flood the device.

Lastly open the hid device in probe so we'll keep receiving battery
status updates.

Signed-off-by: Sjoerd Simons <sjoerd@collabora.com>
---
 drivers/hid/hid-atari.c | 17 +++++++++++++----
 1 file changed, 13 insertions(+), 4 deletions(-)

diff --git a/drivers/hid/hid-atari.c b/drivers/hid/hid-atari.c
index 7da14c7..a7fb1b2 100644
--- a/drivers/hid/hid-atari.c
+++ b/drivers/hid/hid-atari.c
@@ -268,6 +268,7 @@ static void atari_send_request (struct atari_data *ata, uint8_t request) {
 	r->request = request;
 
 	hid_hw_output_report (ata->hdev, (__u8 *) r, sizeof(*r));
+	hid_hw_wait (ata->hdev);
 }
 
 static void atari_update_leds (struct atari_data *ata)
@@ -289,6 +290,7 @@ static void atari_update_leds (struct atari_data *ata)
 	}
 
 	hid_hw_output_report (ata->hdev, (__u8 *) r, ata->led_report_size);
+	hid_hw_wait (ata->hdev);
 }
 
 static void atari_led_worker(struct work_struct *work)
@@ -643,7 +645,6 @@ static void atari_ff_worker(struct work_struct *work)
 	struct atari_data *ata = container_of(work, struct atari_data, ff_worker);
 	struct hid_device *hdev = ata->hdev;
 	struct ff_report *r = ata->ff_report_dma;
-	int i;
 
 	mutex_lock (&ata->lock);
 	r->report_id = ATARI_FF_REPORT;
@@ -819,20 +820,27 @@ static int atari_probe(struct hid_device *hdev, const struct hid_device_id *id)
 					       sizeof(struct led_report),
 					       GFP_KERNEL);
 
+	/* open it to keep receiving battery events */
 	hid_device_io_start (hdev);
+	ret = hid_hw_open (hdev);
+	if (ret) {
+		goto out;
+	}
 
 	/* Get current state of controls */
 	hid_hw_request(hdev,
 		atari_find_report(hdev, HID_INPUT_REPORT, 1),
 		HID_REQ_GET_REPORT);
-
-	/* set leds into a known state */
-	atari_update_leds(ata);
+	hid_hw_wait (ata->hdev);
 
 	/* request update on battery status and controller info */
 	atari_send_request (ata, ATARI_REQUEST_BATTERY_STATUS
 				 | ATARI_REQUEST_CONTROLLER_INFO);
 
+	/* set leds into a known state */
+	atari_update_leds(ata);
+
+out:
 	return ret;
 }
 
@@ -841,6 +849,7 @@ static void atari_remove(struct hid_device *hdev)
 	struct atari_data *ata = hid_get_drvdata(hdev);
 	int i;
 
+	hid_hw_close (hdev);
 	cancel_work_sync(&ata->ff_worker);
 
 	sysfs_remove_group (&ata->hdev->dev.kobj, &atari_device_group);
