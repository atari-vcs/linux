From: Sjoerd Simons <sjoerd.simons@collabora.co.uk>
Date: Mon, 27 Jan 2020 13:59:35 +0100
Subject: Add driver for current version of the atari gamepad firmware

This maps the current firmware first HID report to the standard mapping
defined by gamepad.rst

Signed-off-by: Sjoerd Simons <sjoerd.simons@collabora.co.uk>
---
 drivers/hid/Kconfig     |   6 ++
 drivers/hid/Makefile    |   1 +
 drivers/hid/hid-atari.c | 145 ++++++++++++++++++++++++++++++++++++++++++++++++
 drivers/hid/hid-ids.h   |   4 ++
 4 files changed, 156 insertions(+)
 create mode 100644 drivers/hid/hid-atari.c

diff --git a/drivers/hid/Kconfig b/drivers/hid/Kconfig
index 1ecb512..61f5363 100644
--- a/drivers/hid/Kconfig
+++ b/drivers/hid/Kconfig
@@ -162,6 +162,12 @@ config HID_ASUS
 	- GL553V series
 	- GL753V series
 
+config HID_ATARI
+	tristate "Atari"
+	depends on HID
+	---help---
+	Support for the Atari VCS Modern and Atari VCS Classic gaming devices.
+
 config HID_AUREAL
 	tristate "Aureal"
 	depends on HID
diff --git a/drivers/hid/Makefile b/drivers/hid/Makefile
index 0c03308..79bc3c5 100644
--- a/drivers/hid/Makefile
+++ b/drivers/hid/Makefile
@@ -27,6 +27,7 @@ obj-$(CONFIG_HID_ALPS)		+= hid-alps.o
 obj-$(CONFIG_HID_ACRUX)		+= hid-axff.o
 obj-$(CONFIG_HID_APPLE)		+= hid-apple.o
 obj-$(CONFIG_HID_APPLEIR)	+= hid-appleir.o
+obj-$(CONFIG_HID_ATARI)		+= hid-atari.o
 obj-$(CONFIG_HID_CREATIVE_SB0540)	+= hid-creative-sb0540.o
 obj-$(CONFIG_HID_ASUS)		+= hid-asus.o
 obj-$(CONFIG_HID_AUREAL)	+= hid-aureal.o
diff --git a/drivers/hid/hid-atari.c b/drivers/hid/hid-atari.c
new file mode 100644
index 0000000..1edbdd2
--- /dev/null
+++ b/drivers/hid/hid-atari.c
@@ -0,0 +1,145 @@
+// SPDX-License-Identifier: GPL-2.0-or-later
+
+#include <linux/input.h>
+#include <linux/hid.h>
+#include <linux/module.h>
+
+#include "hid-ids.h"
+
+#define map_key(c)	hid_map_usage(hi, usage, bit, max, EV_KEY, (c));
+#define map_abs(c)	hid_map_usage(hi, usage, bit, max, EV_ABS, (c))
+
+static int atari_mapping(struct hid_device *hdev, struct hid_input *hi,
+		struct hid_field *field, struct hid_usage *usage,
+		unsigned long **bit, int *max)
+{
+	/* Ignore the usage pages other then the first one for now */
+	if (usage->collection_index != 1) {
+		return -1;
+	}
+
+	if ((usage->hid & HID_USAGE_PAGE) == HID_UP_BUTTON) {
+		int code = ((usage->hid - 1) & HID_USAGE);
+		switch (code) {
+			case 0x3: map_key (BTN_WEST);
+				return 1;
+			case 0x4: map_key (BTN_NORTH);
+				return 1;
+		}
+		return 0;
+	}
+
+	if ((usage->hid & HID_USAGE_PAGE) == HID_UP_CONSUMER) {
+		int code = usage->hid & HID_USAGE;
+		switch (code) {
+			case 0x040:
+				map_key(BTN_START);
+				return 1;
+			case 0x223:
+				map_key(BTN_MODE);
+				return 1;
+			case 0x224:
+				map_key(BTN_SELECT);
+				return 1;
+		}
+	}
+
+	if ((usage->hid & HID_USAGE_PAGE) == HID_UP_SIMULATION) {
+		int code = usage->hid & HID_USAGE;
+		switch (code) {
+			case 0xc4:
+				map_abs (ABS_HAT2X);
+				return 1;
+			case 0xc5:
+				map_abs (ABS_HAT2Y);
+				return 1;
+		}
+	}
+
+	/* direct mappings for the right joypad */
+	switch (usage->hid) {
+		case HID_GD_X:
+		case HID_GD_Y:
+			field->logical_minimum = -127;
+			field->logical_maximum = 127;
+			break;
+		case HID_GD_Z:
+			map_abs (ABS_RY);
+			field->logical_minimum = -127;
+			field->logical_maximum = 127;
+			return 1;
+		case HID_GD_RZ:
+			map_abs (ABS_RX);
+			field->logical_minimum = -127;
+			field->logical_maximum = 127;
+			return 1;
+	}
+
+
+	return 0;
+}
+
+static int atari_raw_event(struct hid_device *hdev, struct hid_report *report,
+		u8 *rd, int size)
+{
+	if (report->id != 1 || size != 10)
+		return 0;
+
+	/* Fix values of analog sticks as we remapped them to -127 .. 127  */
+#define WRAP(val) (((s8)val) - 128)
+	/* left stick */
+	rd[3] = WRAP(rd[3]);
+	rd[4] = WRAP(rd[4]);
+	/* right stick */
+	rd[5] = WRAP(rd[5]);
+	rd[6] = WRAP(rd[6]);
+
+	return 0;
+}
+
+static int atari_probe(struct hid_device *hdev, const struct hid_device_id *id)
+{
+	int ret;
+
+	ret = hid_parse(hdev);
+	if (ret) {
+		hid_err(hdev, "parse failed\n");
+		return ret;
+	}
+
+	ret = hid_hw_start(hdev, HID_CONNECT_DEFAULT);
+	if (ret) {
+		hid_err(hdev, "hw start failed\n");
+		return ret;
+	}
+
+	return 0;
+}
+
+static void atari_remove(struct hid_device *hdev)
+{
+	hid_hw_stop(hdev);
+}
+
+static const struct hid_device_id atari_devices[] = {
+	{ HID_USB_DEVICE(USB_VENDOR_ID_ATARI,
+		USB_DEVICE_ID_ATARI_MODERN), },
+	{ HID_USB_DEVICE(USB_VENDOR_ID_ATARI,
+		USB_DEVICE_ID_ATARI_CLASSIC), },
+	{ }
+};
+MODULE_DEVICE_TABLE(hid, atari_devices);
+
+static struct hid_driver atari_driver = {
+	.name		= "atari",
+	.id_table	= atari_devices,
+	.input_mapping	= atari_mapping,
+	.raw_event	= atari_raw_event,
+	.probe		= atari_probe,
+	.remove		= atari_remove,
+};
+module_hid_driver(atari_driver);
+
+MODULE_AUTHOR("Sjoerd Simons");
+MODULE_DESCRIPTION("Atari game controllers");
+MODULE_LICENSE("GPL");
diff --git a/drivers/hid/hid-ids.h b/drivers/hid/hid-ids.h
index 6273e71..1576862 100644
--- a/drivers/hid/hid-ids.h
+++ b/drivers/hid/hid-ids.h
@@ -195,6 +195,10 @@
 #define USB_DEVICE_ID_ASUSTEK_ROG_KEYBOARD3 0x1822
 #define USB_DEVICE_ID_ASUSTEK_FX503VD_KEYBOARD	0x1869
 
+#define USB_VENDOR_ID_ATARI		0x3250
+#define USB_DEVICE_ID_ATARI_MODERN	0x102b
+#define USB_DEVICE_ID_ATARI_CLASSIC	0x102a
+
 #define USB_VENDOR_ID_ATEN		0x0557
 #define USB_DEVICE_ID_ATEN_UC100KM	0x2004
 #define USB_DEVICE_ID_ATEN_CS124U	0x2202
