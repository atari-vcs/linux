From: Sjoerd Simons <sjoerd.simons@collabora.co.uk>
Date: Mon, 27 Jan 2020 13:59:35 +0100
Subject: Add driver for Atari controllers

Signed-off-by: Sjoerd Simons <sjoerd@collabora.com>
---
 drivers/hid/Kconfig     |   6 +
 drivers/hid/Makefile    |   1 +
 drivers/hid/hid-atari.c | 908 ++++++++++++++++++++++++++++++++++++++++++++++++
 drivers/hid/hid-ids.h   |   4 +
 4 files changed, 919 insertions(+)
 create mode 100644 drivers/hid/hid-atari.c

diff --git a/drivers/hid/Kconfig b/drivers/hid/Kconfig
index 54bc563..4685dc0 100644
--- a/drivers/hid/Kconfig
+++ b/drivers/hid/Kconfig
@@ -163,6 +163,12 @@ config HID_ASUS
 	- GL553V series
 	- GL753V series
 
+config HID_ATARI
+	tristate "Atari"
+	depends on HID
+	help
+	Support for the Atari VCS Modern and Atari VCS Classic gaming devices.
+
 config HID_AUREAL
 	tristate "Aureal"
 	depends on HID
diff --git a/drivers/hid/Makefile b/drivers/hid/Makefile
index 4acb583..3123c66 100644
--- a/drivers/hid/Makefile
+++ b/drivers/hid/Makefile
@@ -27,6 +27,7 @@ obj-$(CONFIG_HID_ALPS)		+= hid-alps.o
 obj-$(CONFIG_HID_ACRUX)		+= hid-axff.o
 obj-$(CONFIG_HID_APPLE)		+= hid-apple.o
 obj-$(CONFIG_HID_APPLEIR)	+= hid-appleir.o
+obj-$(CONFIG_HID_ATARI)		+= hid-atari.o
 obj-$(CONFIG_HID_CREATIVE_SB0540)	+= hid-creative-sb0540.o
 obj-$(CONFIG_HID_ASUS)		+= hid-asus.o
 obj-$(CONFIG_HID_AUREAL)	+= hid-aureal.o
diff --git a/drivers/hid/hid-atari.c b/drivers/hid/hid-atari.c
new file mode 100644
index 0000000..08769cc
--- /dev/null
+++ b/drivers/hid/hid-atari.c
@@ -0,0 +1,908 @@
+// SPDX-License-Identifier: GPL-2.0-or-later
+
+#include <linux/input.h>
+#include <linux/hid.h>
+#include <linux/module.h>
+
+#include "hid-ids.h"
+
+#define map_key(c)	hid_map_usage(hi, usage, bit, max, EV_KEY, (c));
+#define map_abs(c)	hid_map_usage(hi, usage, bit, max, EV_ABS, (c))
+#define map_rel(c)	hid_map_usage(hi, usage, bit, max, EV_REL, (c))
+
+#define ATARI_FF_REPORT 1
+#define ATARI_LED_REPORT 2
+#define ATARI_REQUEST_REPORT 3
+
+#define ATARI_INPUT_CONTROL_REPORT 1
+#define ATARI_INPUT_POWER_REPORT 2
+#define ATARI_INPUT_INFO_REPORT 3
+
+#define FUJI_LED_AUTO		0x0
+#define FUJI_LED_ON		0x1
+#define FUJI_LED_OFF		0x2
+#define FUJI_LED_SLOW_BLINK	0x3
+#define FUJI_LED_FAST_BLINK	0x4
+
+#define ATARI_REQUEST_BATTERY_STATUS	BIT(0)
+#define ATARI_REQUEST_CONTROLLER_INFO	BIT(1)
+#define ATARI_REQUEST_XBOX_MODE		BIT(2)
+#define ATARI_REQUEST_CALIBRARION_MODE	BIT(3)
+
+#define LED_FLAGS_HOST_CONTROL	BIT(0)
+
+/* leds controlled by the host */
+#define LEDS_FIRMWARE_HOST    0
+/* leds controlled by the firmware */
+#define LEDS_FIRMWARE_ENABLE  1
+#define LEDS_FIRMWARE_ENABLED 2
+
+#define CLASSIC_LEDS 24
+#define MODERN_LEDS 4
+
+#define BATTERY_ERROR 0x7f
+
+struct led_report {
+	__u8 report_id;
+	__u8 flags;
+	__u8 fuji_led;
+	__u8 leds[0];
+} __packed;
+
+struct ff_engine {
+	__u8 strength;
+	__u8 on_period;
+	__u8 off_period;
+	__u8 repeat;
+} __packed;
+
+struct ff_report {
+	__u8 report_id;
+	struct ff_engine engine[0];
+} __packed;
+
+struct request_report {
+	__u8 report_id;
+	__u8 request;
+} __packed;
+
+struct atari_data {
+	struct hid_device *hdev;
+	struct mutex lock;
+
+	struct delayed_work led_worker;
+	bool led_update_scheduled;
+	struct led_classdev fuji_cled;
+	struct led_classdev cleds[CLASSIC_LEDS];
+
+	/* led brightnesses */
+	int nleds;
+	u8 fuji_led_mode;
+	u8 fuji_led;
+	u8 leds_firmware_control;
+	u8 leds[CLASSIC_LEDS];
+
+	struct work_struct ff_worker;
+	u8 strong_ff;
+	u8 weak_ff;
+
+	/* hid version and mac addres */
+	u16 version;
+	u8 bdaddr[6];
+
+	/* power supply */
+	struct power_supply *battery;
+	struct power_supply_desc battery_desc;
+	int battery_status;
+	uint8_t battery_capacity;
+
+	/* report storage */
+	struct ff_report *ff_report_dma;
+	size_t ff_report_size;
+	struct led_report *led_report_dma;
+	size_t led_report_size;
+	struct request_report *request_report_dma;
+};
+
+static int atari_map_classic(struct hid_device *hdev, struct hid_input *hi,
+			     struct hid_field *field, struct hid_usage *usage,
+			     unsigned long **bit, int *max)
+{
+	if ((usage->hid & HID_USAGE_PAGE) == HID_UP_CONSUMER) {
+		int code = usage->hid & HID_USAGE;
+		switch (code) {
+			case 0x040:
+				map_key(BTN_START);
+				return 1;
+			case 0x223:
+				map_key(BTN_MODE);
+				return 1;
+			case 0x224:
+				map_key(BTN_SELECT);
+				return 1;
+		}
+	}
+
+	if (usage->hid == HID_GD_DIAL) {
+		map_abs (ABS_RUDDER);
+		return 1;
+	}
+
+
+	return 0;
+}
+
+static int atari_map_modern(struct hid_device *hdev, struct hid_input *hi,
+		struct hid_field *field, struct hid_usage *usage,
+		unsigned long **bit, int *max)
+{
+	if ((usage->hid & HID_USAGE_PAGE) == HID_UP_BUTTON) {
+		int code = ((usage->hid - 1) & HID_USAGE);
+		switch (code) {
+			case 0x3: map_key (BTN_WEST);
+				return 1;
+			case 0x4: map_key (BTN_NORTH);
+				return 1;
+		}
+		return 0;
+	}
+
+	if ((usage->hid & HID_USAGE_PAGE) == HID_UP_CONSUMER) {
+		int code = usage->hid & HID_USAGE;
+		switch (code) {
+			case 0x040:
+				map_key(BTN_START);
+				return 1;
+			case 0x223:
+				map_key(BTN_MODE);
+				return 1;
+			case 0x224:
+				map_key(BTN_SELECT);
+				return 1;
+		}
+	}
+
+	if ((usage->hid & HID_USAGE_PAGE) == HID_UP_SIMULATION) {
+		int code = usage->hid & HID_USAGE;
+		switch (code) {
+			case 0xc4:
+				map_abs (ABS_RZ);
+				return 1;
+			case 0xc5:
+				map_abs (ABS_Z);
+				return 1;
+		}
+	}
+
+	/* direct mappings for the right joypad */
+	switch (usage->hid) {
+		case HID_GD_Z:
+			map_abs (ABS_RX);
+			return 1;
+		case HID_GD_RZ:
+			map_abs (ABS_RY);
+			return 1;
+	}
+
+	return 0;
+}
+
+static int atari_mapping(struct hid_device *hdev, struct hid_input *hi,
+		struct hid_field *field, struct hid_usage *usage,
+		unsigned long **bit, int *max)
+{
+	/* Ignore the usage pages other then the first one for now */
+	if (usage->collection_index != 1) {
+		return -1;
+	}
+
+	if (hdev->product == USB_DEVICE_ID_ATARI_CLASSIC)
+		return atari_map_classic(hdev, hi, field, usage, bit, max);
+	else
+		return atari_map_modern(hdev, hi, field, usage, bit, max);
+
+	return 0;
+}
+
+static int atari_mapped(struct hid_device *hdev, struct hid_input *hi,
+		struct hid_field *field, struct hid_usage *usage,
+		unsigned long **bit, int *max)
+{
+	/* No default values for dial to prevent fuzz & flat being set */
+	if (usage->hid == HID_GD_DIAL) {
+		set_bit(usage->type, hi->input->evbit);
+		input_set_abs_params(hi->input, usage->code,
+				field->logical_minimum,
+				field->logical_maximum,
+				0, 0);
+		return -1;
+	}
+
+	return 0;
+}
+
+
+static int atari_raw_event(struct hid_device *hdev, struct hid_report *report,
+		u8 *rd, int size)
+{
+	struct atari_data *ata = hid_get_drvdata(hdev);
+
+	if (report->id == 2 && size == 2) {
+
+		u8 charging = rd[1] >> 7;
+		u8 capacity = rd[1] & 0x7f;
+
+		ata->battery_capacity = capacity;
+		if (capacity == BATTERY_ERROR)
+			ata->battery_status = POWER_SUPPLY_STATUS_UNKNOWN;
+		else if (!charging) {
+			ata->battery_status = POWER_SUPPLY_STATUS_DISCHARGING;
+		} else {
+			ata->battery_status =
+				(capacity == 100) ? POWER_SUPPLY_STATUS_FULL
+						  : POWER_SUPPLY_STATUS_CHARGING;
+		}
+
+		power_supply_changed(ata->battery);
+	}
+
+	if (report->id == 3 && size == 9) {
+		memcpy(&ata->bdaddr, rd + 1, 6);
+		memcpy(&ata->version, rd + 7, 2);
+	}
+
+	return 0;
+}
+
+static struct hid_report *atari_find_report (struct hid_device *hdev,
+	int type,
+	int id) {
+
+	if (type >= HID_REPORT_TYPES || id >= HID_MAX_IDS)
+		return NULL;
+	
+
+	return  hdev->report_enum[type].report_id_hash[id];
+}
+
+static void atari_send_request (struct atari_data *ata, uint8_t request) {
+	struct request_report *r = ata->request_report_dma;
+
+	r->report_id = ATARI_REQUEST_REPORT;
+	r->request = request;
+
+	hid_hw_output_report (ata->hdev, (__u8 *) r, sizeof(*r));
+	hid_hw_wait (ata->hdev);
+}
+
+static void atari_update_leds (struct atari_data *ata)
+{
+	struct led_report *r = ata->led_report_dma;
+	int i;
+
+	r->report_id = ATARI_LED_REPORT;
+	r->flags = ata->fuji_led_mode << 1
+		   | (ata->leds_firmware_control ? 0 : 1);
+	r->fuji_led = ata->fuji_led;
+
+	if (!ata->leds_firmware_control) {
+		for (i = 0; i < ata->nleds; i++) {
+			r->leds[i] = ata->leds[i];
+		}
+	} else if (ata->leds_firmware_control ==  LEDS_FIRMWARE_ENABLE) {
+		ata->leds_firmware_control = LEDS_FIRMWARE_ENABLED;
+	}
+
+	hid_hw_output_report (ata->hdev, (__u8 *) r, ata->led_report_size);
+	hid_hw_wait (ata->hdev);
+}
+
+static void atari_led_worker(struct work_struct *work)
+{
+	struct atari_data *ata = container_of(work,
+					      struct atari_data,
+					      led_worker.work);
+	mutex_lock(&ata->lock);
+	ata->led_update_scheduled = false;
+	atari_update_leds(ata);
+	mutex_unlock(&ata->lock);
+}
+
+static void atari_schedule_led_update (struct atari_data *ata)
+{
+	mutex_lock(&ata->lock);
+	if (!ata->led_update_scheduled) {
+		mod_delayed_work (system_wq, &ata->led_worker, msecs_to_jiffies (2));
+		ata->led_update_scheduled = true;
+	}
+	mutex_unlock(&ata->lock);
+}
+
+static void atari_fuji_led_set(struct led_classdev *led_dev,
+			       enum led_brightness value)
+{
+	struct device *dev = led_dev->dev->parent;
+	struct atari_data *ata = hid_get_drvdata(to_hid_device(dev));
+
+	mutex_lock(&ata->lock);
+	ata->fuji_led_mode = value ? FUJI_LED_ON : FUJI_LED_OFF;
+	ata->fuji_led = value;
+	mutex_unlock(&ata->lock);
+
+	atari_schedule_led_update (ata);
+}
+
+static int atari_fuji_led_set_blink(struct led_classdev *led_dev,
+				     unsigned long *delay_on,
+				     unsigned long *delay_off)
+{
+	struct device *dev = led_dev->dev->parent;
+	struct atari_data *ata = hid_get_drvdata(to_hid_device(dev));
+
+	mutex_lock(&ata->lock);
+	if (!*delay_on || *delay_on > 350) {
+		*delay_on = 500;
+		*delay_off = 500;
+		ata->fuji_led_mode = FUJI_LED_SLOW_BLINK;
+	} else {
+		*delay_on = 200;
+		*delay_off = 200;
+		ata->fuji_led_mode = FUJI_LED_FAST_BLINK;
+	}
+	mutex_unlock(&ata->lock);
+
+	atari_schedule_led_update (ata);
+
+	return 0;
+}
+
+static void atari_led_set(struct led_classdev *led_dev,
+			  enum led_brightness value)
+{
+	struct device *dev = led_dev->dev->parent;
+	struct atari_data *ata = hid_get_drvdata(to_hid_device(dev));
+	int i;
+
+	for (i = 0 ; i < CLASSIC_LEDS ; i++) {
+		if (led_dev == &ata->cleds[i])
+			break;
+	}
+	BUG_ON(i >= CLASSIC_LEDS);
+
+	mutex_lock(&ata->lock);
+	ata->leds_firmware_control = false;
+	ata->leds[i] = value & 0xff;
+	mutex_unlock(&ata->lock);
+
+	atari_schedule_led_update (ata);
+}
+
+static ssize_t firmware_control_show(struct device *led_dev,
+				     struct device_attribute *attr,
+				     char *buf)
+{
+	struct device *dev = led_dev->parent;
+	struct atari_data *ata = hid_get_drvdata(to_hid_device(dev));
+	unsigned int v;
+
+	mutex_lock(&ata->lock);
+	v = ata->fuji_led == FUJI_LED_AUTO;
+	mutex_unlock(&ata->lock);
+
+	return snprintf(buf, PAGE_SIZE, "%u\n", v);
+}
+
+static ssize_t firmware_control_store(struct device *led_dev,
+				      struct device_attribute *attr,
+				      const char *buf,
+				      size_t count)
+{
+	struct device *dev = led_dev->parent;
+	struct atari_data *ata = hid_get_drvdata(to_hid_device(dev));
+	int err;
+	int control;
+
+	err = kstrtouint (buf, 10, &control);
+	if (err)
+		return err;
+	
+	if (control != 0 && control != 1)
+		return -EINVAL;
+	
+	mutex_lock(&ata->lock);
+	ata->fuji_led_mode = control ? FUJI_LED_AUTO : FUJI_LED_OFF;
+	mutex_unlock(&ata->lock);
+
+	atari_schedule_led_update (ata);
+
+	return count;
+}
+
+static DEVICE_ATTR_RW(firmware_control);
+static struct attribute *atari_fuji_led_attrs[] = {
+	&dev_attr_firmware_control.attr,
+	NULL
+};
+
+static const struct attribute_group atari_fuji_led_group = {
+	.attrs = atari_fuji_led_attrs,
+};
+
+static const struct attribute_group *atari_fuji_led_groups[] = {
+	&atari_fuji_led_group,
+	NULL
+};
+
+static int atari_register_fuji_led (struct atari_data *ata)
+{
+	char *name;
+	int ret = 0;
+	struct device *dev = &ata->hdev->dev;
+	size_t name_sz = strlen(dev_name(dev)) + 16;
+	struct led_classdev *led = &ata->fuji_cled;
+
+
+	name = devm_kzalloc (dev, name_sz, GFP_KERNEL);
+	if (name == NULL)
+		return -ENOMEM;
+
+	snprintf(name, name_sz, "%s:white:fuji",  dev_name(dev));
+	led->name = name;
+	led->brightness = 0;
+	led->max_brightness = 255;
+	led->brightness_set = atari_fuji_led_set;
+	led->blink_set = atari_fuji_led_set_blink;
+	led->groups = atari_fuji_led_groups;
+
+	ret = devm_led_classdev_register(dev, led);
+	return ret;
+}
+
+
+static int atari_register_main_led (struct atari_data *ata, int index)
+{
+	char *name;
+	int ret = 0;
+	struct device *dev = &ata->hdev->dev;
+	size_t name_sz = strlen(dev_name(dev)) + 16;
+	struct led_classdev *led = &ata->cleds[index];
+
+	name = devm_kzalloc (dev, name_sz, GFP_KERNEL);
+	if (name == NULL)
+		return -ENOMEM;
+
+	snprintf(name, name_sz, "%s:amber:%02d",  dev_name(dev), index);
+	led->name = name;
+	led->brightness = 0;
+	led->max_brightness = 0xff;
+	led->brightness_set = atari_led_set;
+
+	ret = devm_led_classdev_register(dev, led);
+	return ret;
+}
+
+static ssize_t leds_firmware_control_show(struct device *dev,
+			 struct device_attribute *attr,
+			 char *buf)
+{
+	struct atari_data *ata = hid_get_drvdata(to_hid_device(dev));
+	bool v;
+
+	mutex_lock(&ata->lock);
+	v = ata->leds_firmware_control > 0;
+	mutex_unlock(&ata->lock);
+
+	return snprintf(buf, PAGE_SIZE, "%u\n", v);
+}
+
+static ssize_t leds_firmware_control_store(struct device *dev,
+			 struct device_attribute *attr,
+			 const char *buf,
+			 size_t count)
+{
+	struct atari_data *ata = hid_get_drvdata(to_hid_device(dev));
+	int err;
+	int control;
+
+	err = kstrtouint (buf, 10, &control);
+	if (err)
+		return err;
+	
+	if (control != 0 && control != 1)
+		return -EINVAL;
+	
+	mutex_lock(&ata->lock);
+	ata->leds_firmware_control = control;
+	if (!control) {
+		memset(ata->leds, 0, sizeof(ata->leds));
+	}
+	mutex_unlock(&ata->lock);
+
+	atari_schedule_led_update (ata);
+
+	return count;
+}
+
+static ssize_t fw_version_show(struct device *dev,
+			       struct device_attribute *attr,
+			       char *buf)
+{
+	struct atari_data *ata = hid_get_drvdata(to_hid_device(dev));
+
+	if (ata->version == 0)
+		return -EAGAIN;
+
+	return snprintf(buf, PAGE_SIZE, "%04x\n", ata->version);
+}
+
+static ssize_t bdaddr_show(struct device *dev,
+			   struct device_attribute *attr,
+			   char *buf)
+{
+	struct atari_data *ata = hid_get_drvdata(to_hid_device(dev));
+
+	if (ata->bdaddr[0] == 0)
+		return -EAGAIN;
+
+	return snprintf(buf, PAGE_SIZE, "%02x:%02x:%02x:%02x:%02x:%02x\n",
+		        ata->bdaddr[0],
+		        ata->bdaddr[1],
+		        ata->bdaddr[2],
+		        ata->bdaddr[3],
+		        ata->bdaddr[4],
+		        ata->bdaddr[5]);
+}
+
+static ssize_t xbox_mode_store(struct device *dev,
+			       struct device_attribute *attr,
+			       const char *buf,
+			       size_t count)
+{
+	struct atari_data *ata = hid_get_drvdata(to_hid_device(dev));
+	int err;
+	int v;
+
+	err = kstrtouint (buf, 10, &v);
+	if (err)
+		return err;
+	
+	if (v != 0 && v != 1)
+		return -EINVAL;
+	
+	if (v)
+		atari_send_request (ata, ATARI_REQUEST_XBOX_MODE);
+
+	return count;
+}
+
+static ssize_t calibration_mode_store(struct device *dev,
+				      struct device_attribute *attr,
+				      const char *buf,
+				      size_t count)
+{
+	struct atari_data *ata = hid_get_drvdata(to_hid_device(dev));
+	int err;
+	int v;
+
+	err = kstrtouint (buf, 10, &v);
+	if (err)
+		return err;
+	
+	if (v != 0 && v != 1)
+		return -EINVAL;
+	
+	if (v)
+		atari_send_request (ata, ATARI_REQUEST_CALIBRARION_MODE);
+
+	return count;
+}
+
+static DEVICE_ATTR_RW(leds_firmware_control);
+static DEVICE_ATTR_RO(fw_version);
+static DEVICE_ATTR_RO(bdaddr);
+static DEVICE_ATTR_WO(xbox_mode);
+static DEVICE_ATTR_WO(calibration_mode);
+static struct attribute *atari_device_attrs[] = {
+	&dev_attr_leds_firmware_control.attr,
+	&dev_attr_fw_version.attr,
+	&dev_attr_bdaddr.attr,
+	&dev_attr_xbox_mode.attr,
+	&dev_attr_calibration_mode.attr,
+	NULL
+};
+
+static const struct attribute_group atari_device_group = {
+	.attrs = atari_device_attrs,
+};
+
+static int atari_register_leds (struct atari_data *ata) {
+	int ret = 0;
+	int i = 0;
+
+	INIT_DELAYED_WORK(&ata->led_worker, atari_led_worker);
+
+	ata->nleds = 4;
+	if (ata->hdev->product == USB_DEVICE_ID_ATARI_CLASSIC)
+		ata->nleds = 24;
+
+	ata->led_report_size = sizeof (struct led_report) + ata->nleds;
+	ata->led_report_dma = devm_kzalloc(&ata->hdev->dev,
+					   ata->led_report_size,
+					   GFP_KERNEL);
+
+	ret = atari_register_fuji_led(ata);
+	if (ret)
+		return ret;
+
+	for (i = 0 ; i < ata->nleds ; i++) {
+		ret = atari_register_main_led (ata, i);
+		if (ret != 0)
+			break;
+	}
+
+	/* Default to all leds under firmware control */
+	ata->leds_firmware_control = LEDS_FIRMWARE_ENABLE;
+	ata->fuji_led_mode = FUJI_LED_AUTO;
+
+	return ret;
+}
+
+static void atari_ff_worker(struct work_struct *work)
+{
+	struct atari_data *ata = container_of(work, struct atari_data, ff_worker);
+	struct hid_device *hdev = ata->hdev;
+	struct ff_report *r = ata->ff_report_dma;
+
+	r->report_id = ATARI_FF_REPORT;
+
+	r->engine[0].strength = ata->strong_ff;
+	r->engine[0].on_period = U8_MAX;
+	r->engine[0].off_period = 0;
+	r->engine[0].repeat = 0;
+
+	if (hdev->product == USB_DEVICE_ID_ATARI_MODERN) {
+		r->engine[1].strength = ata->weak_ff;
+		r->engine[1].on_period = U8_MAX;
+		r->engine[1].off_period = 0;
+		r->engine[1].repeat = 0;
+	}
+
+	hid_hw_output_report (hdev, (__u8 *) r, ata->ff_report_size);
+}
+
+static int atari_play_effect(struct input_dev *dev, void *data,
+			  struct ff_effect *effect)
+{
+	struct hid_device *hid = input_get_drvdata(dev);
+	struct atari_data *ata = hid_get_drvdata(hid);
+
+	if (effect->type != FF_RUMBLE)
+		return 0;
+
+	/* scale back to 8 bits */
+	ata->strong_ff = effect->u.rumble.strong_magnitude >> 8;
+	ata->weak_ff = effect->u.rumble.weak_magnitude >> 8;
+
+	schedule_work(&ata->ff_worker);
+	return 0;
+}
+
+static int atari_init_ff(struct atari_data *ata)
+{
+	struct hid_input *hidinput;
+	struct input_dev *input_dev;
+	int n_rumble = 1;
+
+	if (list_empty(&ata->hdev->inputs)) {
+		hid_err(ata->hdev, "no inputs found\n");
+		return -ENODEV;
+	}
+	hidinput = list_entry(ata->hdev->inputs.next, struct hid_input, list);
+	input_dev = hidinput->input;
+
+	if (ata->hdev->product == USB_DEVICE_ID_ATARI_MODERN)
+		n_rumble = 2;
+
+	ata->ff_report_size = sizeof(struct ff_report)
+			      + n_rumble * sizeof(struct ff_engine);
+	ata->ff_report_dma = devm_kzalloc(&ata->hdev->dev,
+					 ata->ff_report_size,
+					 GFP_KERNEL);
+
+	INIT_WORK(&ata->ff_worker, atari_ff_worker);
+	input_set_capability(input_dev, EV_FF, FF_RUMBLE);
+
+	return input_ff_create_memless(input_dev, NULL, atari_play_effect);
+}
+
+static int atari_battery_get_property(struct power_supply *psy,
+				       enum power_supply_property prop,
+				       union power_supply_propval *val)
+{
+	struct atari_data *ata = power_supply_get_drvdata(psy);
+	switch (prop) {
+		case POWER_SUPPLY_PROP_PRESENT:
+			val->intval = (ata->battery_capacity != BATTERY_ERROR);
+			break;
+		case POWER_SUPPLY_PROP_CAPACITY:
+			if (ata->battery_capacity != BATTERY_ERROR)
+				val->intval = ata->battery_capacity;
+			else
+				val->intval = 0;
+			break;
+		case POWER_SUPPLY_PROP_STATUS:
+			val->intval = ata->battery_status;
+			break;
+		case POWER_SUPPLY_PROP_SCOPE:
+			val->intval = POWER_SUPPLY_SCOPE_DEVICE;
+			break;
+		default:
+			return -EINVAL;
+	}
+
+	return 0;
+}
+
+static enum power_supply_property atari_battery_props[] = {
+	POWER_SUPPLY_PROP_PRESENT,
+	POWER_SUPPLY_PROP_CAPACITY,
+	POWER_SUPPLY_PROP_STATUS,
+	POWER_SUPPLY_PROP_SCOPE,
+};
+
+static int atari_probe(struct hid_device *hdev, const struct hid_device_id *id)
+{
+	int ret;
+	struct atari_data *ata;
+	struct power_supply_config psy_cfg = { };
+
+	ata = devm_kzalloc(&hdev->dev, sizeof(*ata), GFP_KERNEL);
+	if (ata == NULL)
+		return -ENOMEM;
+	
+	ata->hdev = hdev;
+	mutex_init(&ata->lock);
+
+	hid_set_drvdata(hdev, ata);
+
+	ret = hid_parse(hdev);
+	if (ret) {
+		hid_err(hdev, "parse failed\n");
+		return ret;
+	}
+
+	ret = hid_hw_start(hdev, HID_CONNECT_DEFAULT);
+	if (ret) {
+		hid_err(hdev, "hw start failed\n");
+		return ret;
+	}
+
+	ret = atari_register_leds (ata);
+	if (ret) {
+		hid_err(hdev, "failed to register leds\n");
+		return ret;
+	}
+
+	ret = atari_init_ff (ata);
+	if (ret) {
+		hid_err(hdev, "failed to register ff\n");
+		return ret;
+	}
+
+	ret = sysfs_create_group (&hdev->dev.kobj, &atari_device_group);
+	if (ret < 0) {
+		hid_err(hdev, "error creating sysfs attrs\n");
+		return ret;
+	}
+
+	/* power supply */
+	ata->battery_desc.name = devm_kasprintf (&hdev->dev,
+						 GFP_KERNEL,
+						 "atari-%s-battery",
+						 dev_name(&hdev->dev));
+
+	ata->battery_desc.properties = atari_battery_props,
+	ata->battery_desc.num_properties = ARRAY_SIZE(atari_battery_props),
+	ata->battery_desc.get_property = atari_battery_get_property,
+	ata->battery_desc.type = POWER_SUPPLY_TYPE_BATTERY,
+
+	ata->battery_status = POWER_SUPPLY_STATUS_UNKNOWN;
+	ata->battery_capacity = BATTERY_ERROR;
+
+	psy_cfg.drv_data = ata;
+
+	ata->battery = devm_power_supply_register(&hdev->dev,
+						  &ata->battery_desc,
+						  &psy_cfg);
+	if (IS_ERR(ata->battery)) {
+		return PTR_ERR(ata->battery);
+	}
+	power_supply_powers(ata->battery, &hdev->dev);
+
+	ata->request_report_dma = devm_kzalloc(&ata->hdev->dev,
+					       sizeof(struct led_report),
+					       GFP_KERNEL);
+
+	/* open it to keep receiving battery events */
+	hid_device_io_start (hdev);
+	ret = hid_hw_open (hdev);
+	if (ret) {
+		goto out;
+	}
+
+	/* Get current state of controls */
+	hid_hw_request(hdev,
+		       atari_find_report(hdev,
+					 HID_INPUT_REPORT,
+					 ATARI_INPUT_CONTROL_REPORT),
+		HID_REQ_GET_REPORT);
+	hid_hw_wait (ata->hdev);
+
+	/* Synchronize bluetooth and version info straight away */
+	hid_hw_request(hdev,
+		       atari_find_report(hdev,
+					 HID_INPUT_REPORT,
+					 ATARI_INPUT_INFO_REPORT),
+		       HID_REQ_GET_REPORT);
+	hid_hw_wait (ata->hdev);
+
+	/* request update on battery status and controller info */
+	atari_send_request (ata, ATARI_REQUEST_BATTERY_STATUS
+				 | ATARI_REQUEST_CONTROLLER_INFO);
+
+	/* set leds into a known state */
+	atari_update_leds(ata);
+
+out:
+	return ret;
+}
+
+static void atari_remove(struct hid_device *hdev)
+{
+	struct atari_data *ata = hid_get_drvdata(hdev);
+	int i;
+
+	hid_hw_close (hdev);
+	cancel_work_sync(&ata->ff_worker);
+
+	sysfs_remove_group (&ata->hdev->dev.kobj, &atari_device_group);
+
+	devm_led_classdev_unregister(&hdev->dev, &ata->fuji_cled);
+	for (i = 0 ; i < CLASSIC_LEDS; i++) {
+		if (ata->cleds[i].name == NULL)
+			break;
+		devm_led_classdev_unregister(&hdev->dev, &ata->cleds[i]);
+	}
+	cancel_delayed_work_sync(&ata->led_worker);
+
+	hid_hw_stop(hdev);
+}
+
+static const struct hid_device_id atari_devices[] = {
+	{ HID_USB_DEVICE(USB_VENDOR_ID_ATARI,
+		USB_DEVICE_ID_ATARI_MODERN), },
+	{ HID_BLUETOOTH_DEVICE (USB_VENDOR_ID_ATARI,
+		USB_DEVICE_ID_ATARI_MODERN), },
+	{ HID_USB_DEVICE(USB_VENDOR_ID_ATARI,
+		USB_DEVICE_ID_ATARI_CLASSIC), },
+	{ HID_BLUETOOTH_DEVICE(USB_VENDOR_ID_ATARI,
+		USB_DEVICE_ID_ATARI_CLASSIC), },
+	{ }
+};
+MODULE_DEVICE_TABLE(hid, atari_devices);
+
+static struct hid_driver atari_driver = {
+	.name		= "atari",
+	.id_table	= atari_devices,
+	.input_mapping	= atari_mapping,
+	.input_mapped	= atari_mapped,
+	.raw_event	= atari_raw_event,
+	.probe		= atari_probe,
+	.remove		= atari_remove,
+};
+
+module_hid_driver(atari_driver);
+
+MODULE_AUTHOR("Sjoerd Simons <sjoerd.simons@collabora.co.uk>");
+MODULE_DESCRIPTION("Atari game controllers");
+MODULE_LICENSE("GPL");
diff --git a/drivers/hid/hid-ids.h b/drivers/hid/hid-ids.h
index 136b58a..d914d3a 100644
--- a/drivers/hid/hid-ids.h
+++ b/drivers/hid/hid-ids.h
@@ -193,6 +193,10 @@
 #define USB_DEVICE_ID_ASUSTEK_ROG_KEYBOARD3 0x1822
 #define USB_DEVICE_ID_ASUSTEK_FX503VD_KEYBOARD	0x1869
 
+#define USB_VENDOR_ID_ATARI		0x3250
+#define USB_DEVICE_ID_ATARI_MODERN	0x1002
+#define USB_DEVICE_ID_ATARI_CLASSIC	0x1001
+
 #define USB_VENDOR_ID_ATEN		0x0557
 #define USB_DEVICE_ID_ATEN_UC100KM	0x2004
 #define USB_DEVICE_ID_ATEN_CS124U	0x2202
