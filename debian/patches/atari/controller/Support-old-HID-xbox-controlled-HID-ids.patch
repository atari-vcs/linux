From: Sjoerd Simons <sjoerd.simons@collabora.co.uk>
Date: Thu, 19 Mar 2020 09:01:03 +0100
Subject: Support old HID xbox controlled HID ids

XBOX one controllers can expose two different HID IDs; Enable and map
the seemingly older HID id as well.

Which one is used seems to depend on the pairing capabilities of the
host; If the devices is paired with a host that registers its bluetooth
agent as NoInputNoOutput then the older HID ID is used, otherwise the
newer one.

Signed-off-by: Sjoerd Simons <sjoerd.simons@collabora.co.uk>
---
 drivers/hid/hid-ids.h       |  1 +
 drivers/hid/hid-microsoft.c | 72 +++++++++++++++++++++++++++++++++++++++++++--
 2 files changed, 71 insertions(+), 2 deletions(-)

diff --git a/drivers/hid/hid-ids.h b/drivers/hid/hid-ids.h
index 0c7cbc5..785adba 100644
--- a/drivers/hid/hid-ids.h
+++ b/drivers/hid/hid-ids.h
@@ -842,6 +842,7 @@
 #define USB_DEVICE_ID_MS_TOUCH_COVER_2   0x07a7
 #define USB_DEVICE_ID_MS_TYPE_COVER_2    0x07a9
 #define USB_DEVICE_ID_MS_POWER_COVER     0x07da
+#define USB_DEVICE_ID_MS_XBOX_ONE_S_CONTROLLER_OLD	0x02e0
 #define USB_DEVICE_ID_MS_XBOX_ONE_S_CONTROLLER	0x02fd
 #define USB_DEVICE_ID_MS_PIXART_MOUSE    0x00cb
 
diff --git a/drivers/hid/hid-microsoft.c b/drivers/hid/hid-microsoft.c
index 0652a5e..fbd253f 100644
--- a/drivers/hid/hid-microsoft.c
+++ b/drivers/hid/hid-microsoft.c
@@ -27,6 +27,7 @@
 #define MS_DUPLICATE_USAGES	BIT(5)
 #define MS_SURFACE_DIAL		BIT(6)
 #define MS_XBOX			BIT(7)
+#define MS_XBOX_OLD		BIT(8)
 
 struct ms_data {
 	unsigned long quirks;
@@ -243,6 +244,53 @@ static int ms_xbox_quirk(struct hid_input *hi, struct hid_field *field,
 	return 0;
 }
 
+static int ms_xbox_old_quirk(struct hid_input *hi, struct hid_field *field,
+		struct hid_usage *usage, unsigned long **bit, int *max)
+{
+	if ((usage->hid & HID_USAGE_PAGE) == HID_UP_BUTTON) {
+		int code = ((usage->hid) & HID_USAGE);
+
+		switch (code) {
+			case 0x3:
+				map_key (BTN_WEST);
+				return 1;
+			case 0x4:
+				map_key (BTN_NORTH);
+				return 1;
+			case 0x5:
+				map_key (BTN_TL);
+				return 1;
+			case 0x6:
+				map_key (BTN_TR);
+				return 1;
+			case 0x7:
+				ms_map_key_clear (BTN_SELECT);
+				return 1;
+			case 0x8:
+				ms_map_key_clear (BTN_START);
+				return 1;
+			case 0x9:
+				ms_map_key_clear (BTN_THUMBL);
+				return 1;
+			case 0xa:
+				ms_map_key_clear (BTN_THUMBR);
+				return 1;
+		}
+		return 0;
+	}
+
+	if ((usage->hid & HID_USAGE_PAGE) == HID_UP_GENDESK) {
+		int code = usage->hid & HID_USAGE;
+		switch (code) {
+			case 0x85:
+				map_key(BTN_MODE);
+				return 1;
+		}
+	}
+
+	return 0;
+}
+
 static int ms_input_mapping(struct hid_device *hdev, struct hid_input *hi,
 		struct hid_field *field, struct hid_usage *usage,
 		unsigned long **bit, int *max)
@@ -273,6 +321,12 @@ static int ms_input_mapping(struct hid_device *hdev, struct hid_input *hi,
 			return ret;
 	}
 
+	if (quirks & MS_XBOX_OLD) {
+		int ret = ms_xbox_old_quirk(hi, field, usage, bit, max);
+		if (ret)
+			return ret;
+	}
+
 	return 0;
 }
 
@@ -294,7 +348,7 @@ static int ms_input_configured (struct hid_device *hdev, struct hid_input *hi)
 	struct ms_data *ms = hid_get_drvdata(hdev);
 	unsigned long quirks = ms->quirks;
 
-	if (!(quirks & MS_XBOX))
+	if (!(quirks & (MS_XBOX|MS_XBOX_OLD)))
 		return 0;
 
 	input_set_abs_params(hi->input, ABS_X, -32768, 32767, 255, 4096);
@@ -373,6 +427,18 @@ static int ms_event(struct hid_device *hdev, struct hid_field *field,
 		}
 	}
 
+	if (quirks & MS_XBOX_OLD) {
+		switch (usage->hid) {
+			case HID_GD_X:
+			case HID_GD_Y:
+			case HID_GD_RX:
+			case HID_GD_RY:
+				input_report_abs (input, usage->code,
+					value - 32768);
+			return 1;
+		}
+	}
+
 	return 0;
 }
 
@@ -434,7 +500,7 @@ static int ms_init_ff(struct hid_device *hdev)
 	hidinput = list_entry(hdev->inputs.next, struct hid_input, list);
 	input_dev = hidinput->input;
 
-	if (!(ms->quirks & MS_XBOX))
+	if (!(ms->quirks & (MS_XBOX|MS_XBOX_OLD)))
 		return 0;
 
 	ms->hdev = hdev;
@@ -546,6 +612,8 @@ static const struct hid_device_id ms_devices[] = {
 		.driver_data = MS_SURFACE_DIAL },
 	{ HID_BLUETOOTH_DEVICE(USB_VENDOR_ID_MICROSOFT, USB_DEVICE_ID_MS_XBOX_ONE_S_CONTROLLER),
 		.driver_data = MS_XBOX },
+	{ HID_BLUETOOTH_DEVICE(USB_VENDOR_ID_MICROSOFT, USB_DEVICE_ID_MS_XBOX_ONE_S_CONTROLLER_OLD),
+		.driver_data = MS_XBOX_OLD },
 	{ }
 };
 MODULE_DEVICE_TABLE(hid, ms_devices);
